name: Create New Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  code_quality_check:
    name: Code Quality Check
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Git LFS
        run: |
          git lfs install
          git lfs pull

      - name: Install Dependencies
        run: |
          gem install xcpretty xcpretty-json-formatter
          brew install swiftlint swiftformat clang-format jq
          mkdir -p build/reports

      - name: Run Code Quality Checks
        run: |
          chmod +x scripts/ci/*.sh
          ./scripts/ci/run-all-checks.sh

      - name: Upload Code Analysis Reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: build/reports/

  auto_fix:
    name: Auto-Fix Code Issues
    needs: code_quality_check
    runs-on: macos-15
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Git LFS
        run: |
          git lfs install
          git lfs pull

      - name: Install Dependencies
        run: |
          brew install swiftlint swiftformat clang-format

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Auto-Fix Code Issues
        id: auto_fix
        run: |
          chmod +x scripts/ci/*.sh
          # Run with error checking
          set +e
          ./scripts/ci/auto-fix.sh
          RESULT=$?
          set -e
          
          if [ $RESULT -ne 0 ]; then
            echo "::error::Auto-fix script failed with error code $RESULT"
            echo "fix_status=failed" >> $GITHUB_OUTPUT
          else
            echo "fix_status=success" >> $GITHUB_OUTPUT
          fi

      - name: Check for Changes and Commit
        id: check_changes
        if: steps.auto_fix.outputs.fix_status != 'failed'
        run: |
          if git status --porcelain | grep .; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "Detected changes after auto-fixing code issues"
            
            git add -A
            git commit -m "Auto-fix code quality issues [skip ci]" -m "Automatically fixed code quality issues using SwiftLint, SwiftFormat, and Clang-Format."
            git push
            echo "✅ Successfully fixed code issues and pushed changes"
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "No changes detected after auto-fixing code issues"
          fi
          
      - name: Report Auto-Fix Failure
        if: steps.auto_fix.outputs.fix_status == 'failed'
        run: |
          echo "::error::The auto-fix process encountered critical errors. Please check the logs for details."
          exit 1

      - name: Create Fix Summary
        if: steps.check_changes.outputs.changes_detected == 'true'
        run: |
          echo "# 🛠️ Auto-Fixed Code Issues" > fix_summary.md
          echo "" >> fix_summary.md
          echo "The workflow automatically fixed code quality issues:" >> fix_summary.md
          echo "" >> fix_summary.md
          echo "## Changed Files" >> fix_summary.md
          git diff --name-only HEAD^ HEAD >> fix_summary.md
          
          echo "## Summary of Fixes" >> fix_summary.md
          echo "* Applied SwiftLint autocorrect with your custom rules" >> fix_summary.md
          echo "* Applied SwiftFormat with your custom configuration" >> fix_summary.md
          echo "* Applied Clang-Format to Objective-C/C++ files" >> fix_summary.md
          
          cat fix_summary.md

  build:
    name: Build and Package
    needs: auto_fix
    runs-on: macos-15
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Git LFS
        run: |
          git lfs install
          git lfs pull

      - name: Install Dependencies
        run: |
          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64
          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid
          brew install p7zip gnu-sed
          gem install xcpretty

      - name: Compile
        run: |
          mkdir -p upload
          make package SCHEME="'backdoor (Release)'" CFLAGS="-Onone" SWIFT_OPTIMIZATION_LEVEL="-Onone" SWIFT_COMPILATION_MODE="singlefile"
          mv packages/* upload/

      - name: Get Version Number
        id: get_version
        run: |
          VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" Payload/backdoor.app/Info.plist)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup Release Assets
        run: |
          mv upload/backdoor.ipa upload/backdoor_v${{ env.VERSION }}.ipa
          cp upload/backdoor_v${{ env.VERSION }}.ipa upload/backdoor_v${{ env.VERSION }}.tipa

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: backdoor v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          files: upload/*.ipa
          generate_release_notes: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}