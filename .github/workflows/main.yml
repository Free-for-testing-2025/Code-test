name: Create New Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  xcpretty_check:
    name: XCPretty Code Quality Check
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Git LFS
        run: |
          git lfs install
          git lfs pull

      - name: Install dependencies
        run: |
          gem install xcpretty xcpretty-json-formatter
          brew install swiftlint
          mkdir -p build/reports/xcpretty
          mkdir -p build/reports/swiftlint

      - name: Run SwiftLint with Custom Configuration
        run: |
          echo "Running SwiftLint with project-specific configuration..."
          # Use the custom SwiftLint configuration from Clean folder
          swiftlint lint --config Clean/.swiftlint.yml --reporter json > build/reports/swiftlint/swiftlint.json || true
          swiftlint lint --config Clean/.swiftlint.yml --reporter html > build/reports/swiftlint/swiftlint.html || true
          swiftlint lint --config Clean/.swiftlint.yml --strict || echo "WARNING: SwiftLint found issues that should be addressed"
          
          # Extract key issues for quick review
          echo "# SwiftLint Issues Summary" > build/reports/swiftlint/summary.md
          echo "## Critical Issues" >> build/reports/swiftlint/summary.md
          cat build/reports/swiftlint/swiftlint.json | grep -A 3 '"severity":"error"' | grep -E '"rule"|"reason"|"line"|"character"' | grep -v "Linting Swift files" >> build/reports/swiftlint/summary.md || echo "No critical issues found" >> build/reports/swiftlint/summary.md
      
      - name: Run xcpretty Project Analysis
        run: |
          echo "Running XCPretty project analysis..."
          xcodebuild -project 'backdoor.xcodeproj' -list | tee build/reports/xcpretty/project_info.txt | xcpretty --color
          
      - name: Run Basic Build Check
        run: |
          echo "Running basic build check with warnings as errors..."
          set +e
          xcodebuild clean build \
            -project 'backdoor.xcodeproj' \
            -scheme 'backdoor (Debug)' \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_TREAT_WARNINGS_AS_ERRORS=YES \
            GCC_TREAT_WARNINGS_AS_ERRORS=YES \
            2>&1 | tee build/reports/xcpretty/build_check.txt | xcpretty --color
          
          if [ $? -ne 0 ]; then
            echo "::warning::Build check found issues that need to be fixed"
          fi
          
      - name: Run Deep Code Analysis
        run: |
          echo "Running deep code analysis with xcpretty..."
          
          # Run analyzer and capture both regular and JSON output
          xcodebuild analyze \
            -project 'backdoor.xcodeproj' \
            -scheme 'backdoor (Debug)' \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO \
            CLANG_ANALYZER_OUTPUT=html \
            CLANG_ANALYZER_OUTPUT_DIR=build/reports/analyzer \
            RUN_CLANG_STATIC_ANALYZER=YES \
            2>&1 | tee build/reports/xcpretty/analyzer_output.txt | xcpretty --color --report html --output build/reports/xcpretty/analysis.html
          
          # Count issues found in the output
          ERROR_COUNT=$(grep -c "error:" build/reports/xcpretty/analyzer_output.txt || echo 0)
          WARNING_COUNT=$(grep -c "warning:" build/reports/xcpretty/analyzer_output.txt || echo 0)
          
          echo "Analysis found $ERROR_COUNT errors and $WARNING_COUNT warnings"
          
          # Create a summary report
          echo "# XCPretty Analysis Results" > build/reports/xcpretty/summary.md
          echo "## Issues Found" >> build/reports/xcpretty/summary.md
          echo "* Errors: $ERROR_COUNT" >> build/reports/xcpretty/summary.md
          echo "* Warnings: $WARNING_COUNT" >> build/reports/xcpretty/summary.md
          
          # Extract actual errors and warnings
          echo "## Error Details" >> build/reports/xcpretty/summary.md
          grep "error:" build/reports/xcpretty/analyzer_output.txt | sort | uniq >> build/reports/xcpretty/summary.md || echo "No errors found"
          
          echo "## Warning Details" >> build/reports/xcpretty/summary.md
          grep "warning:" build/reports/xcpretty/analyzer_output.txt | sort | uniq >> build/reports/xcpretty/summary.md || echo "No warnings found"
          
      - name: Upload Code Analysis Reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: build/reports/

  build:
    name: Build and Package
    needs: xcpretty_check
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Git LFS
        run: |
          git lfs install
          git lfs pull

      - name: Install dependencies (packages)
        run: |
          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64
          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid
          brew install 7zip gnu-sed
          gem install xcpretty

      - name: Compile
        run: | 
          mkdir upload
          # Use optimization level -Onone to enable previews and avoid Swift compilation blocking issues
          make package SCHEME="'backdoor (Release)'" CFLAGS="-Onone" SWIFT_OPTIMIZATION_LEVEL="-Onone" SWIFT_COMPILATION_MODE="singlefile"
          mv packages/* upload/

      - name: Get Version Number
        id: get_version
        run: |
          VERSION=$( /usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" Payload/backdoor.app/Info.plist )
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Setup
        run: |
          mv upload/backdoor.ipa upload/backdoor_v${VERSION}.ipa
          cp upload/backdoor_v${VERSION}.ipa upload/backdoor_v${VERSION}.tipa

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: backdoor v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          files: |
            upload/*ipa
          generate_release_notes: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}


