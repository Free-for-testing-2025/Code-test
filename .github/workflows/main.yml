name: Build iOS App
on:
  workflow_dispatch:  # This enables manual triggering
    inputs:
      build_mode:
        description: 'Build configuration mode'
        required: true
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
      enable_debugger:
        description: 'Enable the custom debugger'
        default: true
        required: true
        type: boolean
      enable_logging:
        description: 'Enable enhanced logging'
        default: true
        required: true
        type: boolean
      debug_flags:
        description: 'Additional debug flags'
        default: '-DDEBUG=1'
        required: false
        type: string

jobs:
  build:
    name: Build App in ${{ inputs.build_mode }} Mode
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Git LFS
        run: |
          # Check if Git LFS is needed
          if git lfs env >/dev/null 2>&1; then
            git lfs install
            git lfs pull
          else
            echo "Git LFS not configured, skipping."
          fi

      - name: Select Xcode Version
        run: |
          # List available Xcode versions
          sudo xcode-select -p
          ls -la /Applications/Xcode*
          
          # Select the latest Xcode version available
          LATEST_XCODE=$(ls -d /Applications/Xcode* | sort -V | tail -n 1)
          echo "Latest Xcode path: $LATEST_XCODE"
          sudo xcode-select --switch "$LATEST_XCODE"
          
          # Verify Xcode version
          xcodebuild -version

      - name: Install Dependencies
        run: |
          # Install ldid (required for iOS app signing)
          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64
          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid
          
          # Install xcpretty for nicer build output
          gem install xcpretty
          
          # Verify ldid installation
          if ! command -v ldid >/dev/null 2>&1; then
            echo "::error::ldid installation failed"
            exit 1
          fi
          ldid -v || echo "ldid version check not supported"

      - name: Build in ${{ inputs.build_mode }} Mode
        run: |
          # Check Xcode project format version
          if ! plutil -p backdoor.xcodeproj/project.pbxproj > /dev/null 2>&1; then
            echo "::error::Unable to read project file format"
            exit 1
          fi
          
          echo "Xcode version:"
          xcodebuild -version
          
          echo "Available schemes:"
          xcodebuild -project backdoor.xcodeproj -list || {
            echo "::error::Failed to list schemes. Project might be in an incompatible format."
            exit 1
          }
          
          echo "=== Building in ${{ inputs.build_mode }} Mode ==="
          set -o pipefail
          
          # Create a directory for the build output
          mkdir -p build
          
          # Prepare conditional flags based on inputs
          # Define Swift compilation conditions
          SWIFT_CONDITIONS="${{ inputs.build_mode == 'Debug' && 'DEBUG' || '' }}"
          
          # Add debugger flags if enabled
          if [[ "${{ inputs.enable_debugger }}" == "true" && "${{ inputs.build_mode }}" == "Debug" ]]; then
            SWIFT_CONDITIONS="$SWIFT_CONDITIONS DEBUGGER_ENABLED"
            echo "Custom debugger has been enabled"
          fi
          
          # Set up build flags - properly formatted with dash prefix for xcodebuild
          BUILD_FLAGS=""
          
          # Add each build setting with proper formatting
          BUILD_FLAGS="$BUILD_FLAGS -SWIFT_ACTIVE_COMPILATION_CONDITIONS=$SWIFT_CONDITIONS"
          
          # Add debug-specific flags if in Debug mode
          if [[ "${{ inputs.build_mode }}" == "Debug" ]]; then
            BUILD_FLAGS="$BUILD_FLAGS -OTHER_SWIFT_FLAGS=${{ inputs.debug_flags }}"
            BUILD_FLAGS="$BUILD_FLAGS -SWIFT_OPTIMIZATION_LEVEL=-Onone"
            BUILD_FLAGS="$BUILD_FLAGS -SWIFT_COMPILATION_MODE=singlefile"
            BUILD_FLAGS="$BUILD_FLAGS -GCC_PREPROCESSOR_DEFINITIONS=DEBUG=1"
            BUILD_FLAGS="$BUILD_FLAGS -GCC_OPTIMIZATION_LEVEL=0"
            BUILD_FLAGS="$BUILD_FLAGS -COPY_PHASE_STRIP=NO"
            BUILD_FLAGS="$BUILD_FLAGS -ENABLE_TESTABILITY=YES"
            
            # Add debugger flags if enabled - Fixed: Removed DEBUGGER_ENABLED as a build action
            if [[ "${{ inputs.enable_debugger }}" == "true" ]]; then
              # Using GCC_PREPROCESSOR_DEFINITIONS to define DEBUGGER_ENABLED instead of as a build action
              BUILD_FLAGS="$BUILD_FLAGS -GCC_PREPROCESSOR_DEFINITIONS=DEBUG=1 DEBUGGER_ENABLED=1"
              BUILD_FLAGS="$BUILD_FLAGS -INCLUDE_DEBUGGER=YES"
            fi
            
            # Add logging flags if enabled
            if [[ "${{ inputs.enable_logging }}" == "true" ]]; then
              BUILD_FLAGS="$BUILD_FLAGS -ENABLE_ENHANCED_LOGGING=YES"
              BUILD_FLAGS="$BUILD_FLAGS -VERBOSE_LOGGING=YES"
            fi
          fi
          
          echo "Using build flags: $BUILD_FLAGS"
          
          xcodebuild \
            -jobs $(sysctl -n hw.ncpu) \
            -project 'backdoor.xcodeproj' \
            -scheme 'backdoor (${{ inputs.build_mode }})' \
            -configuration ${{ inputs.build_mode }} \
            -arch arm64 -sdk iphoneos \
            -derivedDataPath build \
            CODE_SIGNING_ALLOWED=NO \
            CFLAGS="${{ inputs.build_mode == 'Debug' && inputs.debug_flags || '' }} ${{ inputs.build_mode == 'Debug' && '-Onone' || '' }}" \
            $BUILD_FLAGS | tee build_log.txt | xcpretty
          
          BUILD_RESULT=$?
          
          # Check for build errors
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "::error::Build failed with exit code $BUILD_RESULT"
            if [ -f "build_log.txt" ]; then
              echo "Last 50 lines of build log:"
              tail -n 50 build_log.txt
            fi
            exit 1
          fi
          
          # Record what flags were used in the build for debugging purposes
          echo -e "\n### Build Configuration Used ###" >> build_log.txt
          echo "Build Flags: $BUILD_FLAGS" >> build_log.txt
          echo "Swift Conditions: $SWIFT_CONDITIONS" >> build_log.txt
          echo "Scheme: backdoor (${{ inputs.build_mode }})" >> build_log.txt

      - name: Create IPA
        run: |
          APP_PATH=$(find build -name "*.app" -type d)
          if [ -z "$APP_PATH" ]; then
            echo "::error::Could not find .app file"
            exit 1
          fi
          
          # Create Payload directory and copy .app into it
          mkdir -p Payload
          cp -r "$APP_PATH" Payload/
          
          # Remove any existing _CodeSignature directory 
          rm -rf Payload/backdoor.app/_CodeSignature 2>/dev/null
          
          # Create IPA
          zip -r "backdoor_${{ inputs.build_mode }}.ipa" Payload
          
          # Cleanup
          rm -rf Payload

      - name: Verify Debug Flags (Debug Mode Only)
        if: inputs.build_mode == 'Debug' && inputs.enable_debugger == 'true'
        run: |
          echo "Verifying debug information in the built app..."
          
          # Extract IPA to check the binary
          mkdir -p extracted
          unzip -q backdoor_${{ inputs.build_mode }}.ipa -d extracted
          
          # Find the main executable
          APP_BINARY=$(find extracted/Payload -name "backdoor" -type f)
          
          if [ -z "$APP_BINARY" ]; then
            echo "Main executable not found, using app bundle for checks"
            APP_PATH=$(find extracted/Payload -name "*.app" -type d | head -1)
          else
            echo "Found main executable at $APP_BINARY"
          fi
          
          # Check for DEBUG flag in the binary
          if [ -n "$APP_BINARY" ]; then
            echo "Checking for DEBUG symbols in binary..."
            otool -l "$APP_BINARY" | grep -i debug || true
            nm "$APP_BINARY" | grep -i debug || true
          fi
          
          # Check for debugger Swift files
          echo "Checking for Debugger Swift files..."
          find extracted/Payload -name "*Debug*.swift" | sort
          
          # Check Info.plist for debug configuration
          PLIST_PATH=$(find extracted/Payload -name "Info.plist" | head -1)
          if [ -n "$PLIST_PATH" ]; then
            echo "Checking Info.plist for debug configuration..."
            plutil -p "$PLIST_PATH" | grep -i debug || true
          fi
          
          # Add details about debugger activation
          if [[ "${{ inputs.enable_debugger }}" == "true" ]]; then
            echo -e "\n=== Debugger Information ===\n"
            echo "The debugger is integrated and can be activated by:"
            echo "1. The floating debugger button in the app UI"
            echo "2. Triple tapping in empty areas of the app"
            echo "3. Shake gesture on device"
          fi

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: backdoor-${{ inputs.build_mode }}-ipa
          path: backdoor_${{ inputs.build_mode }}.ipa
          retention-days: 5

      - name: Upload Build Log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs
          path: build_log.txt
          retention-days: 5
