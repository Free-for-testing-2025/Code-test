name: Build iOS App
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build App in Debug Mode
    runs-on: macos-14  # Using the latest stable macOS runner
    # Run for PRs or main branch pushes
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || '' }}

      - name: Install Git LFS
        run: |
          # Check if Git LFS is needed
          if git lfs env >/dev/null 2>&1; then
            git lfs install
            git lfs pull
          else
            echo "Git LFS not configured, skipping."
          fi

      - name: Install Dependencies
        run: |
          # Install ldid (required for iOS app signing)
          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64
          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid
          
          # Install xcpretty for nicer build output
          gem install xcpretty
          
          # Verify ldid installation
          if ! command -v ldid >/dev/null 2>&1; then
            echo "::error::ldid installation failed"
            exit 1
          fi
          ldid -v || echo "ldid version check not supported"

      - name: Build in Debug Mode
        run: |
          echo "Xcode version:"
          xcodebuild -version
          
          echo "Available schemes:"
          xcodebuild -project backdoor.xcodeproj -list
          
          echo "=== Building in Debug Mode ==="
          set -o pipefail
          
          xcodebuild \
            -jobs $(sysctl -n hw.ncpu) \
            -project 'backdoor.xcodeproj' \
            -scheme 'backdoor (Debug)' \
            -configuration Debug \
            -arch arm64 -sdk iphoneos \
            CODE_SIGNING_ALLOWED=NO | tee build_log.txt | xcpretty
          
          # Check for build errors
          if [ -f "build_log.txt" ] && grep -q "error:" build_log.txt; then
            echo "::error::Build failed"
            tail -n 50 build_log.txt
            exit 1
          fi