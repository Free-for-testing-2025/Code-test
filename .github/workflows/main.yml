name: Build iOS App
on:
  workflow_dispatch:  # This enables manual triggering
    inputs:
      build_mode:
        description: 'Build configuration mode'
        required: true
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release

jobs:
  build:
    name: Build App in ${{ inputs.build_mode }} Mode
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Git LFS
        run: |
          # Check if Git LFS is needed
          if git lfs env >/dev/null 2>&1; then
            git lfs install
            git lfs pull
          else
            echo "Git LFS not configured, skipping."
          fi

      - name: Select Xcode Version
        run: |
          # List available Xcode versions
          sudo xcode-select -p
          ls -la /Applications/Xcode*
          
          # Select the latest Xcode version available
          LATEST_XCODE=$(ls -d /Applications/Xcode* | sort -V | tail -n 1)
          echo "Latest Xcode path: $LATEST_XCODE"
          sudo xcode-select --switch "$LATEST_XCODE"
          
          # Verify Xcode version
          xcodebuild -version

      - name: Install Dependencies
        run: |
          # Install ldid (required for iOS app signing)
          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64
          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid
          
          # Install xcpretty for nicer build output
          gem install xcpretty
          
          # Verify ldid installation
          if ! command -v ldid >/dev/null 2>&1; then
            echo "::error::ldid installation failed"
            exit 1
          fi
          ldid -v || echo "ldid version check not supported"

      - name: Build in ${{ inputs.build_mode }} Mode
        run: |
          # Check Xcode project format version
          if ! plutil -p backdoor.xcodeproj/project.pbxproj > /dev/null 2>&1; then
            echo "::error::Unable to read project file format"
            exit 1
          fi
          
          echo "Xcode version:"
          xcodebuild -version
          
          echo "Available schemes:"
          xcodebuild -project backdoor.xcodeproj -list || {
            echo "::error::Failed to list schemes. Project might be in an incompatible format."
            exit 1
          }
          
          echo "=== Building in ${{ inputs.build_mode }} Mode ==="
          set -o pipefail
          
          # Create a directory for the build output
          mkdir -p build
          
          xcodebuild \
            -jobs $(sysctl -n hw.ncpu) \
            -project 'backdoor.xcodeproj' \
            -scheme 'backdoor (${{ inputs.build_mode }})' \
            -configuration ${{ inputs.build_mode }} \
            -arch arm64 -sdk iphoneos \
            -derivedDataPath build \
            CODE_SIGNING_ALLOWED=NO | tee build_log.txt | xcpretty
          
          BUILD_RESULT=$?
          
          # Check for build errors
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "::error::Build failed with exit code $BUILD_RESULT"
            if [ -f "build_log.txt" ]; then
              echo "Last 50 lines of build log:"
              tail -n 50 build_log.txt
            fi
            exit 1
          fi

      - name: Create IPA
        run: |
          APP_PATH=$(find build -name "*.app" -type d)
          if [ -z "$APP_PATH" ]; then
            echo "::error::Could not find .app file"
            exit 1
          fi
          
          # Create Payload directory and copy .app into it
          mkdir -p Payload
          cp -r "$APP_PATH" Payload/
          
          # Create IPA
          zip -r "backdoor_${{ inputs.build_mode }}.ipa" Payload
          
          # Cleanup
          rm -rf Payload

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: backdoor-${{ inputs.build_mode }}-ipa
          path: backdoor_${{ inputs.build_mode }}.ipa
          retention-days: 5

      - name: Upload Build Log
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-logs
          path: build_log.txt
          retention-days: 5