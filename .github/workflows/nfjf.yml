name: Auto-Fix Build Errors

on:
  workflow_run:
    workflows: ["Create New Release"]
    types:
      - completed

jobs:
  auto_fix_build_errors:
    name: Auto-Fix Build Errors
    runs-on: macos-15
    if: github.event.workflow_run.conclusion == 'failure'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Git LFS
        run: |
          git lfs install
          git lfs pull

      - name: Download Artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });
            
            const buildLog = artifacts.data.artifacts.find(artifact => artifact.name === "ipa-files");
            if (!buildLog) {
              console.log("No build log artifacts found.");
              return;
            }
            
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: buildLog.id,
              archive_format: 'zip'
            });
            
            const fs = require('fs');
            fs.writeFileSync('artifact.zip', Buffer.from(download.data));
            
            console.log("Downloaded artifact.zip");

      - name: Extract Artifacts
        run: |
          mkdir -p artifact-contents
          unzip -o artifact.zip -d artifact-contents || echo "No artifacts to extract"
          ls -la artifact-contents || echo "No artifact contents"
          
          if [ -f "artifact-contents/build_log.txt" ]; then
            echo "Build log found, copying for analysis..."
            cp artifact-contents/build_log.txt ./
          else
            echo "::warning::No build log found in artifacts"
          fi

      - name: Install Python Dependencies
        run: |
          pip3 install requests
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Fix Build Error - SCHEME Parameter
        run: |
          echo "Fixing build error with SCHEME parameter in workflow..."
          
          # Find the workflow file
          WORKFLOW_FILE=".github/workflows/main.yml"
          
          if [ -f "$WORKFLOW_FILE" ]; then
            # Check for syntax error near unexpected token '(' in the build log
            if grep -q "syntax error near unexpected token" build_log.txt && grep -q "(" build_log.txt; then
              echo "Detected parentheses issue in scheme name"
              
              # Replace the Make-based build with direct xcodebuild
              cat > workflow_fix.patch << 'EOL'
--- a/.github/workflows/main.yml
+++ b/.github/workflows/main.yml
@@ -180,12 +180,43 @@
           # Clean any previous builds first
           make clean || true
           
-          # Build with appropriate scheme format - with properly escaped parentheses
-          # The scheme name needs special handling due to parentheses
-          SCHEME_NAME="backdoor (Release)"
-          
-          # Use tee to capture output for diagnostics while piping to xcpretty
-          make package "SCHEME=${SCHEME_NAME}" CFLAGS="-Onone" SWIFT_OPTIMIZATION_LEVEL="-Onone" SWIFT_COMPILATION_MODE="singlefile" | tee build_log.txt | xcpretty
+          # We need to handle the scheme name specially to deal with spaces and parentheses
+          # This approach avoids shell syntax errors by escaping in multiple ways
+          
+          # Create a safe scheme name with escaped parentheses for the make command
+          echo "Using direct compilation approach to avoid scheme name issues..."
+          
+          # Skip using the make command and use xcodebuild directly
+          mkdir -p packages
+          set -o pipefail && xcodebuild \
+            -jobs $(sysctl -n hw.ncpu) \
+            -project 'backdoor.xcodeproj' \
+            -scheme 'backdoor (Release)' \
+            -configuration Release \
+            -arch arm64 -sdk iphoneos \
+            CODE_SIGNING_ALLOWED=NO \
+            CFLAGS="-Onone" \
+            SWIFT_OPTIMIZATION_LEVEL="-Onone" \
+            SWIFT_COMPILATION_MODE="singlefile" | tee build_log.txt | xcpretty
+            
+          # Create IPA directly
+          echo "Creating IPA package..."
+          mkdir -p Payload
+          cp -r $(find ~/Library/Developer/Xcode/DerivedData -name "backdoor.app" -type d | head -n 1) Payload/ || echo "No app found, using alternative method"
+          
+          # If app wasn't found, try Build directory
+          if [ ! -d "Payload/backdoor.app" ]; then
+            find . -name "backdoor.app" -type d | head -n 1 | xargs -I{} cp -r {} Payload/ || echo "Warning: Could not find app bundle"
+          fi
+          
+          # Package only if app exists
+          if [ -d "Payload/backdoor.app" ]; then
+            zip -r9 packages/backdoor.ipa Payload
+            echo "Package created successfully"
+          else
+            echo "::error::Failed to create IPA - app bundle not found"
+            exit 1
+          fi
EOL
              
              # Apply the patch while handling different sed versions
              if patch -p1 "$WORKFLOW_FILE" < workflow_fix.patch; then
                echo "Successfully applied direct xcodebuild fix"
              else
                # Try a simpler approach if the patch fails
                sed -i '' '/SCHEME_NAME=.*backdoor/,+5d' "$WORKFLOW_FILE" 2>/dev/null || \
                sed -i '/SCHEME_NAME=.*backdoor/,+5d' "$WORKFLOW_FILE"
                
                # Insert the direct xcodebuild approach
                sed -i '' '/make clean || true/a\
          # Skip using make and use xcodebuild directly\
          mkdir -p packages\
          set -o pipefail && xcodebuild -project backdoor.xcodeproj -scheme "backdoor (Release)" -configuration Release CODE_SIGNING_ALLOWED=NO | tee build_log.txt | xcpretty\
          ' "$WORKFLOW_FILE" 2>/dev/null || \
                sed -i '/make clean || true/a\
          # Skip using make and use xcodebuild directly\
          mkdir -p packages\
          set -o pipefail && xcodebuild -project backdoor.xcodeproj -scheme "backdoor (Release)" -configuration Release CODE_SIGNING_ALLOWED=NO | tee build_log.txt | xcpretty\
          ' "$WORKFLOW_FILE"
              fi
              
              echo "Updated build command in $WORKFLOW_FILE to use direct xcodebuild"
            else
              # Generic SCHEME parameter fix if it's not the parentheses issue
              sed -i '' 's/SCHEME='\''backdoor (Release)'\''/SCHEME="backdoor \(Release\)"/' "$WORKFLOW_FILE" 2>/dev/null || \
              sed -i 's/SCHEME='\''backdoor (Release)'\''/SCHEME="backdoor \(Release\)"/' "$WORKFLOW_FILE"
              
              echo "Updated SCHEME parameter in $WORKFLOW_FILE"
            fi
            
            # Display changes made
            git diff "$WORKFLOW_FILE"
          else
            echo "::error::Workflow file not found at $WORKFLOW_FILE"
            exit 1
          fi

      - name: Check for Makefile Issues
        run: |
          echo "Checking Makefile for potential issues..."
          
          if [ -f "Makefile" ]; then
            # Check if there might be issues with the SCHEME variable handling
            if grep -q "SCHEME" "Makefile"; then
              echo "Found SCHEME references in Makefile:"
              grep -n "SCHEME" "Makefile"
              
              # Create a fix for the Makefile if necessary
              cat > makefile_fix.patch << 'EOL'
          --- a/Makefile
          +++ b/Makefile
          @@ -5,7 +5,7 @@
           PLATFORM = iphoneos
           NAME = backdoor
          -SCHEME ?= 'backdoor (Debug)'
          +SCHEME ?= backdoor\ \(Debug\)
           RELEASE = Release-iphoneos
           CONFIGURATION = Release
          EOL
              
              # Apply the patch if the pattern matches
              if grep -q "SCHEME ?= 'backdoor (Debug)'" "Makefile"; then
                patch -p1 < makefile_fix.patch
                echo "Applied fix to Makefile"
              else
                echo "Makefile has a different format, skipping automatic patch"
              fi
            fi
          else
            echo "::warning::Makefile not found"
          fi

      - name: Create Python Auto-Fix Script
        run: |
          mkdir -p scripts/ci
          cat > scripts/ci/auto-fix-build-errors.py << 'EOL'
          #!/usr/bin/env python3
          """
          Automatic Build Error Analysis and Correction Tool
          """
          import os
          import re
          import sys
          
          def main():
              print("Analyzing build logs for errors...")
              if len(sys.argv) > 1 and os.path.exists(sys.argv[1]):
                  with open(sys.argv[1], 'r') as f:
                      content = f.read()
                  
                  # Look for specific errors
                  if "syntax error near unexpected token `('" in content:
                      print("Detected parenthesis escaping issue in build command")
                      print("This issue has been fixed in the workflow file")
                      return 0
                  
                  print("No specific fixable errors identified in the logs")
                  return 1
              else:
                  print("No log file provided or file not found")
                  return 1
          
          if __name__ == "__main__":
              sys.exit(main())
          EOL
          
          chmod +x scripts/ci/auto-fix-build-errors.py
          
          # Test the script
          if [ -f "build_log.txt" ]; then
            python3 scripts/ci/auto-fix-build-errors.py build_log.txt
          fi

      - name: Commit and Push Fixes
        run: |
          # Check if there are any changes to commit
          if git status --porcelain | grep .; then
            echo "Changes detected from auto-fix, committing..."
            
            git add -A
            git commit -m "Auto-fix build errors [skip ci]" -m "Automatically fixed build command issues with SCHEME parameter."
            git push
            echo "✅ Successfully fixed build errors and pushed changes"
          else
            echo "No changes to commit after auto-fix"
          fi
