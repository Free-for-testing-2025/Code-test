name: Build Debug with Debugger Enabled

on:
  workflow_dispatch:
    inputs:
      scheme:
        description: 'Build scheme to use (Debug/Release)'
        default: 'backdoor (Debug)'
        required: true
        type: choice
        options:
          - 'backdoor (Debug)'
          - 'backdoor (Release)'
      debug_flags:
        description: 'Additional debug flags'
        default: '-DDEBUG=1'
        required: false
        type: string
      enable_debugger:
        description: 'Enable the custom debugger'
        default: true
        required: true
        type: boolean
      enable_logging:
        description: 'Enable enhanced logging'
        default: true
        required: true
        type: boolean

jobs:
  build_debug:
    name: Build Debug Version
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Dependencies
        run: |
          # Install ldid for iOS app signing
          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64
          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid
          
          # Install other dependencies
          brew install p7zip gnu-sed
          
          # Install xcpretty for nicer build output
          gem install xcpretty
          
          # Create build directory 
          mkdir -p build
          
          # Verify ldid installation
          which ldid
          ldid -v || echo "ldid version check not supported"

      - name: Build with Debug Configuration
        run: |
          # Create upload directory
          mkdir -p upload
          
          # Output environment information for debugging
          echo "Xcode version:"
          xcodebuild -version
          
          echo "Available schemes:"
          xcodebuild -project backdoor.xcodeproj -list
          
          echo "=== Building Debug Version with Make ==="
          # Prepare conditional flags based on inputs
          DEBUGGER_FLAGS=""
          if [[ "${{ github.event.inputs.enable_debugger }}" == "true" ]]; then
            DEBUGGER_FLAGS="DEBUGGER_ENABLED=1 INCLUDE_DEBUGGER=1"
            echo "Custom debugger has been enabled"
          fi
          
          LOGGING_FLAGS=""
          if [[ "${{ github.event.inputs.enable_logging }}" == "true" ]]; then
            LOGGING_FLAGS="ENABLE_ENHANCED_LOGGING=1 VERBOSE_LOGGING=1"
            echo "Enhanced logging has been enabled"
          fi
          
          # Define Swift compilation conditions
          SWIFT_CONDITIONS="DEBUG"
          if [[ "${{ github.event.inputs.enable_debugger }}" == "true" ]]; then
            SWIFT_CONDITIONS="$SWIFT_CONDITIONS DEBUGGER_ENABLED"
          fi
          
          # Bypass the Makefile scheme handling and run xcodebuild directly to avoid quoting issues
          echo "Building directly with xcodebuild to avoid scheme name quoting issues"
          
          # Set up build flags - properly formatted with dash prefix for xcodebuild
          DEBUG_BUILD_FLAGS=""
          
          # Add each build setting with proper formatting
          DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -SWIFT_ACTIVE_COMPILATION_CONDITIONS=$SWIFT_CONDITIONS"
          DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -OTHER_SWIFT_FLAGS=${{ github.event.inputs.debug_flags }}"
          DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -SWIFT_OPTIMIZATION_LEVEL=-Onone"
          DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -SWIFT_COMPILATION_MODE=singlefile"
          DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -GCC_PREPROCESSOR_DEFINITIONS=DEBUG=1"
          DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -GCC_OPTIMIZATION_LEVEL=0"
          DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -COPY_PHASE_STRIP=NO"
          DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -ENABLE_TESTABILITY=YES"
          
          # Add debugger flags if enabled
          if [[ "${{ github.event.inputs.enable_debugger }}" == "true" ]]; then
            DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -DEBUGGER_ENABLED=1"
            DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -INCLUDE_DEBUGGER=1"
          fi
          
          # Add logging flags if enabled
          if [[ "${{ github.event.inputs.enable_logging }}" == "true" ]]; then
            DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -ENABLE_ENHANCED_LOGGING=1"
            DEBUG_BUILD_FLAGS="$DEBUG_BUILD_FLAGS -VERBOSE_LOGGING=1"
          fi
          
          echo "Using build flags: $DEBUG_BUILD_FLAGS"
          
          # Create output directories
          mkdir -p packages
          rm -rf Payload
          
          # Build directly with xcodebuild
          echo "Running xcodebuild with scheme '${{ github.event.inputs.scheme }}'"
          set -o pipefail && xcodebuild \
            -jobs $(sysctl -n hw.ncpu) \
            -project 'backdoor.xcodeproj' \
            -scheme "${{ github.event.inputs.scheme }}" \
            -configuration Debug \
            -arch arm64 -sdk iphoneos \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            CODE_SIGNING_ALLOWED=NO \
            CFLAGS="${{ github.event.inputs.debug_flags }} -Onone" \
            $DEBUG_BUILD_FLAGS | tee build_log.txt | xcpretty
            
          # Capture build status
          BUILD_STATUS=$?
          if [ $BUILD_STATUS -ne 0 ]; then
            echo "xcodebuild failed with status $BUILD_STATUS"
            echo "Build log tail:"
            tail -n 50 build_log.txt
            exit $BUILD_STATUS
          fi
          
          # Record what flags were used in the build for debugging purposes
          echo -e "\n### Build Configuration Used ###" >> build_log.txt
          echo "Debug Build Flags: $DEBUG_BUILD_FLAGS" >> build_log.txt
          echo "Swift Conditions: $SWIFT_CONDITIONS" >> build_log.txt
          echo "Scheme: ${{ github.event.inputs.scheme }}" >> build_log.txt
          
          echo "Build completed successfully, finding the built app..."
          
          # Find the built app using multiple search patterns for reliability
          DERIVED_DATA_PATH=~/Library/Developer/Xcode/DerivedData
          echo "Searching in DerivedData: $DERIVED_DATA_PATH"
          
          # Search for the app bundle
          echo "Searching for backdoor.app bundle..."
          APP_PATH=$(find "$DERIVED_DATA_PATH" -name "backdoor.app" -type d 2>/dev/null | head -n 1)
          
          if [ -z "$APP_PATH" ]; then
            echo "App not found in primary location, checking build products directory..."
            APP_PATH=$(find "$DERIVED_DATA_PATH" -path "*/Build/Products/*" -name "backdoor.app" -type d 2>/dev/null | head -n 1)
          fi
          
          if [ -z "$APP_PATH" ]; then
            echo "Searching recursively from current directory..."
            APP_PATH=$(find . -name "backdoor.app" -type d 2>/dev/null | head -n 1)
          fi
          
          if [ -z "$APP_PATH" ]; then
            echo "ERROR: Could not find built app"
            echo "Listing contents of DerivedData to debug:"
            find "$DERIVED_DATA_PATH" -type d -name "backdoor*" 2>/dev/null || echo "No matching directories found"
            exit 1
          fi
          
          echo "Found app at: $APP_PATH"
          echo "App info:"
          ls -la "$APP_PATH"
          
          # Package the app
          echo "Packaging app into IPA..."
          mkdir -p Payload
          cp -r "$APP_PATH" Payload/
          
          # Remove any existing _CodeSignature directory 
          rm -rf Payload/backdoor.app/_CodeSignature 2>/dev/null
          
          # Create the IPA file
          echo "Creating IPA file..."
          zip -r9 packages/backdoor.ipa Payload | tee -a build_log.txt
          
          # Verify the IPA was created
          if [ -f "packages/backdoor.ipa" ]; then
            echo "Successfully created IPA file: packages/backdoor.ipa"
            echo "IPA file size: $(du -h packages/backdoor.ipa | cut -f1)"
          else
            echo "ERROR: Failed to create IPA file"
            exit 1
          fi
            
          # Check if build was successful
          if [ ! -d "packages" ] || [ -z "$(ls -A packages 2>/dev/null)" ]; then
            echo "::error::Build failed - no package files were created"
            echo "=== Build Log Tail ===" 
            tail -n 50 build_log.txt
            exit 1
          fi
          
          # Move packages to upload directory
          mv packages/* upload/ || { echo "::error::No build output to move"; exit 1; }
          
      - name: Verify Debug Flags
        run: |
          echo "Verifying debug information in the built app..."
          
          # IPAs are zip files, extract first to check the binary
          mkdir -p extracted
          unzip -q upload/*.ipa -d extracted
          
          # Find the main executable
          APP_BINARY=$(find extracted/Payload -name "backdoor" -type f)
          
          if [ -z "$APP_BINARY" ]; then
            echo "Main executable not found, using app bundle for checks"
            APP_PATH=$(find extracted/Payload -name "*.app" -type d | head -1)
          else
            echo "Found main executable at $APP_BINARY"
          fi
          
          # Check for DEBUG flag in the binary
          if [ -n "$APP_BINARY" ]; then
            echo "Checking for DEBUG symbols in binary..."
            otool -l "$APP_BINARY" | grep -i debug || true
            nm "$APP_BINARY" | grep -i debug || true
          fi
          
          # Check for debugger Swift files
          echo "Checking for Debugger Swift files..."
          find extracted/Payload -name "*Debug*.swift" | sort
          
          # Check Info.plist for debug configuration
          PLIST_PATH=$(find extracted/Payload -name "Info.plist" | head -1)
          if [ -n "$PLIST_PATH" ]; then
            echo "Checking Info.plist for debug configuration..."
            plutil -p "$PLIST_PATH" | grep -i debug || true
          fi
          
          # Rename the IPA to indicate debug build
          mv upload/backdoor.ipa upload/backdoor-debug.ipa || true
          if [ -f "upload/backdoor-ts.tipa" ]; then
            mv upload/backdoor-ts.tipa upload/backdoor-debug.tipa
          fi
          
          # Add details about debugger activation
          echo -e "\n=== Debugger Information ===\n"
          echo "The debugger is integrated and can be activated by:"
          echo "1. The floating debugger button in the app UI"
          echo "2. Triple tapping in empty areas of the app"
          echo "3. Shake gesture on device"

      - name: Upload Debug Build
        uses: actions/upload-artifact@v4
        with:
          name: debug-build
          path: |
            upload/*.ipa
            upload/*.tipa
            build_log.txt
          retention-days: 7
          if-no-files-found: warn
